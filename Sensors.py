'''
Created on 12 nov 2016

@author: federico
'''

import mosquitto
import json
import threading
import random
import xml.etree.ElementTree as ET

broker_ip="127.0.0.1"
first_data=1
shadow_position=1
external_lux=0
azimuth=0
elevation=0
light_status=0
light_value=0.0
area=1
artificial_light=0
conversion_lux_wm2=0.0079
number_of_people=0
start_time=0
end_time=0
max_people=0

file_name="sensor.csv"

def on_connect(client,userdata,rc):
    print ("connected with result code"+str(rc)+": "+client._client_id)
    client.subscribe("environment/sun_light", 2)
    client.subscribe("actuators/control",2)
    client.subscribe("command/end")
    
def on_message(client,userdata,msg):
    
    global irradiance,elevation,azimuth,external_lux,area,shadow_position,light_status,light_value,artificial_light,number_of_people,first_data
    jsonfile=json.loads(msg.payload)
    
    if msg.topic=="actuators/control":
        
        #Getting data
        shadow_position=jsonfile["position"]
        new_area=jsonfile["area"]
        light_status=jsonfile["light_status"]
        
        if light_status==1:
            artificial_light=jsonfile["artificial_light"]
        else:
            artificial_light=0
        
        # This is a control for the first data coming in order to use not updated area the first time 
        if first_data>0 and external_lux>0:
            print "INITIAL AREA "+str(area)+ " "+str(new_area)
            area=new_area
            first_data-=1
            
        #FINAL DATA OF LIGHT
        light_value=(external_lux*new_area)+artificial_light
          
        print "Received by actuators:"+ str(jsonfile["time"])+ " "+ str(artificial_light)+"\n"
        print "Inside light after message="+str(light_value)+" artificial="+str(artificial_light)
        
        #Writing on file
        output=open(file_name,"a")
        output.write(str(jsonfile["time"])+","+str(light_value)+","+str(external_lux*new_area)+","+str(artificial_light)+","+str(number_of_people)+"\n")
        output.close()
        
        #Update of the area
        area=new_area
            
    elif msg.topic=="environment/sun_light": 
        
        #Getting data
        elevation=jsonfile["elevation"]
        azimuth=jsonfile["azimuth"]
        side=jsonfile["side"]
        data={}
        data["time"]=jsonfile["time"]
        data["side"]=side
        
        #If it's the first external light data use the area generated by the double skin
        if first_data>0:
            external_lux=jsonfile["lux_with_shadow"]
            light_value=external_lux+artificial_light
        else:
            external_lux=jsonfile["lux_no_DSSW"]
            light_value=external_lux*area+artificial_light
        
        data['light_value']=light_value
        data["external_light"]=external_lux*area
        data["occupancy"]=getRandomPeople(start_time,end_time,data["time"]) #THIS WILL BE A SENSOR NEAR THE WINDOW!!!!!
        jsonfile2=json.dumps(data)
        
        print "Sending to policy:"+str(jsonfile["time"]) +" "+ str(artificial_light)+ " "+ str(data["external_light"])+"\n"
        #Need of thread to publish a message due to mosquitto implementation. Without it doesn't work
        t=threading.Thread(target=send_data,args=(client,jsonfile2,))
        t.start()
        
    elif msg.topic=="command/end":
        #Received a kill command: send it to policy and quit
        if jsonfile["command"]==1:
            t=threading.Thread(target=send_data_end,args=(client,jsonfile,))
            t.start()

def send_data_end(client,jsonfile):
    client.publish("command/end",json.dumps(jsonfile),qos=2)
    client.disconnect()
            
def on_disconnect(client,userdata,rc):
    print "Sensor disconnecting" 
           
def send_data(client,jsonfile2):
    client.publish("sensors/light_value",jsonfile2, qos=2)

def getRandomPeople(start_time,end_time,timet):
    #Generate a random number of people inside the office hour time
    global number_of_people,max_people
    if timet<start_time or timet>end_time:
        number_of_people=0
    else:
        number_of_people=random.randint(0,max_people)
        
    return number_of_people
    
if __name__ == '__main__':
    
    
    client=mosquitto.Mosquitto("light_sensor")
    client.on_connect=on_connect
    client.on_message=on_message
    client.on_disconnect=on_disconnect
    
    client.connect(broker_ip, port=1883, keepalive=60, bind_address="") 
    
    e=ET.parse("config.xml").getroot()
    
    start_time=float(e.get("OfficeStartTime").split(":")[0])
    end_time=float(e.get("OfficeEndTime").split(":")[0])
    max_people=int(e.get("MaxNumberOfPeople"))
    random.seed(float(e.get("Seed")))
    
    client.loop_forever()
    